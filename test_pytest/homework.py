# 1. Программа получает на вход число. Реализовать
# функцию, которая определяет, является ли это число простым
# (делится только на единицу и на само себя).
# Написать модульное автотестирование с учетом граничных значений и классов эквивалентности 5 тестов


def is_prime(n):
    """Проверяем, является ли число простым"""
    if n <= 1:
        return False
    if n == 2:
        return True
    if n % 2 == 0:
        return False

    # Проверяем делители от 3 до корня из n
    for i in range(3, int(n**0.5) + 1, 2):  # - начинается с 3 и заканчивается корнем из n
        if n % i == 0:  # n % i == 0 проверяет, делится ли n на i без остатка
            return False  # Если нашли делитель - число не простое
    return True  # Если не нашли делитель - число простое


# 2.Написать модульное автотестирование с учетом граничных значений и классов эквивалентности 5 тестов
# Для тестирования создать фикстуру которая подготовит тестовые данные для функции -
# [(случайные данные от 20-120, случайные данные от 20-220),
# (случайные данные от 20-120, случайные данные от 20-220),
# (случайные данные от 20-120, случайные данные от 20-220),
# (случайные данные от 20-120, случайные данные от 20-220),
# (случайные данные от 20-120, случайные данные от 20-220)] + параметризация


# @pytest.fixture(scope='module')
# def lst():
#     lst_temp = []
#     for i in range(10):
#         lst_temp.append(random.randint(0, 100))
#     yield lst_temp
#     print(lst_temp)


def imt(w, h):
    try:
        if w <= 0 or h <= 0:
            raise ValueError("Значения должны быть положительными")
        h = h / 100
        index = w / (h**2)

        if index < 16:
            return "выраженный дефицит"
        elif 16 <= index < 18.5:
            return "дефицит"
        elif 18.5 <= index < 25:
            return "норма"
        elif 25 <= index < 30:
            return "избыточность"
        elif 30 <= index < 35:
            return "1 степени"
        elif 35 <= index < 40:
            return "2 степени"
        elif index >= 40:
            return "3 степени"

    except ValueError:
        return "Error"
